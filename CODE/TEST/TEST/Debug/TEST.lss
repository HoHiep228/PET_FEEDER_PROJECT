
TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000005b  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000002a  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  000001eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d1  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000042  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000d0  000000d0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000c8  000000c8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#include <stdio.h>
#include <xc.h>

int main(void)
{
	DDRA = 0XFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0XFF;
  70:	87 bb       	out	0x17, r24	; 23
	DDRC = 0XFF;
  72:	84 bb       	out	0x14, r24	; 20
	DDRD = 0XFF;
  74:	81 bb       	out	0x11, r24	; 17
    while(1)
    {
        PORTA = 0X00;
  76:	1b ba       	out	0x1b, r1	; 27
		PORTB = 0X00;
  78:	18 ba       	out	0x18, r1	; 24
		PORTC = 0X00;
  7a:	15 ba       	out	0x15, r1	; 21
		PORTD = 0X00;
  7c:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f e3       	ldi	r18, 0x3F	; 63
  80:	8d e0       	ldi	r24, 0x0D	; 13
  82:	93 e0       	ldi	r25, 0x03	; 3
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
		_delay_ms(1000);
		PORTA = 0XFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8b bb       	out	0x1b, r24	; 27
		PORTB = 0XFF;
  94:	88 bb       	out	0x18, r24	; 24
		PORTC = 0XFF;
  96:	85 bb       	out	0x15, r24	; 21
		PORTD = 0XFF;
  98:	82 bb       	out	0x12, r24	; 18
  9a:	2f e3       	ldi	r18, 0x3F	; 63
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x34>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x3e>
  aa:	00 00       	nop
  ac:	e4 cf       	rjmp	.-56     	; 0x76 <main+0xa>

Disassembly of section .text.__dummy_fini:

000000cc <_fini>:
  cc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000ce <__funcs_on_exit>:
  ce:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000d0 <__simulator_exit>:
  d0:	08 95       	ret

Disassembly of section .text.exit:

000000ae <exit>:
  ae:	ec 01       	movw	r28, r24
  b0:	0e 94 67 00 	call	0xce	; 0xce <__funcs_on_exit>
  b4:	0e 94 66 00 	call	0xcc	; 0xcc <_fini>
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 68 00 	call	0xd0	; 0xd0 <__simulator_exit>
  be:	ce 01       	movw	r24, r28
  c0:	0e 94 64 00 	call	0xc8	; 0xc8 <_Exit>

Disassembly of section .text._Exit:

000000c8 <_Exit>:
  c8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
